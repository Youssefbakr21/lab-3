//=====[Libraries]=============================================================

#include "mbed.h"
#include "arm_book_lib.h"

//=====[Declaration and initialization of public global objects]===============

DigitalIn enterButton(BUTTON1);
DigitalIn gasDetectorButton(D2);
DigitalIn overTempDetectorButton(D3);
DigitalIn aButton(D4);
DigitalIn bButton(D5);
DigitalIn cButton(D6);
DigitalIn dButton(D7);

DigitalOut alarmLed(LED1);
DigitalOut incorrectCodeLed(LED3);
DigitalOut systemBlockedLed(LED2);

// New outputs to indicate gas and temperature states
bool gasDetectorState = OFF;
bool overTempDetectorState = OFF;

UnbufferedSerial uartUsb(USBTX, USBRX, 115200);

// Timer for regular status updates
Timer statusTimer;

//=====[Declaration and initialization of public global variables]=============

bool alarmState = OFF;
int numberOfIncorrectCodes = 0;
const int STATUS_UPDATE_INTERVAL_MS = 6000; // Status update every 6 seconds

//=====[Declarations (prototypes) of public functions]=========================

void inputsInit();
void outputsInit();

void alarmActivationUpdate();
void alarmDeactivationUpdate();
void detectorStateUpdate();
void regularStatusUpdate();

void uartTask();
void availableCommands();
void sendGasDetectorState();
void sendOverTempDetectorState();
void sendAlarmState();

//=====[Main function, the program entry point after power on or reset]========

int main()
{
    inputsInit();
    outputsInit();
    statusTimer.start();
    
    while (true) {
        detectorStateUpdate();
        alarmActivationUpdate();
        alarmDeactivationUpdate();
        regularStatusUpdate();
        uartTask();
        
        // Add a short delay to slow down the loop execution
        ThisThread::sleep_for(100ms);
    }
}

//=====[Implementations of public functions]===================================

void inputsInit()
{
    gasDetectorButton.mode(PullDown);
    overTempDetectorButton.mode(PullDown);
    aButton.mode(PullDown);
    bButton.mode(PullDown);
    cButton.mode(PullDown);
    dButton.mode(PullDown);
}

void outputsInit()
{
    alarmLed = OFF;
    incorrectCodeLed = OFF;
    systemBlockedLed = OFF;
    gasDetectorState = OFF;
    overTempDetectorState = OFF;
}

// Regular status update function
void regularStatusUpdate()
{
    if (statusTimer.elapsed_time() > 6s) {  // Using duration literals for clarity
        sendAlarmState();
        statusTimer.reset();
    }
}

// New function to update detector states based on button presses
void detectorStateUpdate()
{
    static bool gasDetectorButtonPrevState = OFF;
    static bool overTempDetectorButtonPrevState = OFF;
    
    // Check for rising edge on gas detector button (D2)
    if (gasDetectorButton && !gasDetectorButtonPrevState) {
        gasDetectorState = !gasDetectorState;  // Toggle the state
    }
    gasDetectorButtonPrevState = gasDetectorButton;
    
    // Check for rising edge on over temperature detector button (D3)
    if (overTempDetectorButton && !overTempDetectorButtonPrevState) {
        overTempDetectorState = !overTempDetectorState;  // Toggle the state
    }
    overTempDetectorButtonPrevState = overTempDetectorButton;
}

void alarmActivationUpdate()
{
    if (gasDetectorState || overTempDetectorState) {
        alarmState = ON;
    }
    alarmLed = alarmState;
}

void alarmDeactivationUpdate()
{
    if (numberOfIncorrectCodes < 5) {
        if (aButton && bButton && cButton && dButton && !enterButton) {
            incorrectCodeLed = OFF;
        }
        if (enterButton && !incorrectCodeLed && alarmState) {
            if (aButton && bButton && !cButton && !dButton) {
                alarmState = OFF;
                numberOfIncorrectCodes = 0;
            } else {
                incorrectCodeLed = ON;
                numberOfIncorrectCodes = numberOfIncorrectCodes + 1;
            }
        }
    } else {
        systemBlockedLed = ON;
    }
}

void sendAlarmState()
{
    if (alarmState) {
        uartUsb.write("STATUS UPDATE: The alarm is ACTIVATED\r\n", 39);
        // Send additional info about which detector triggered the alarm
        if (gasDetectorState) {
            uartUsb.write("  - Gas detector is ON\r\n", 25);
        }
        if (overTempDetectorState) {
            uartUsb.write("  - Over temperature detector is ON\r\n", 37);
        }
    } else {
        uartUsb.write("STATUS UPDATE: The alarm is NOT ACTIVATED\r\n", 43);
    }
}

void sendGasDetectorState()
{
    if (gasDetectorState) {
        uartUsb.write("Gas detected! Detector state: ON\r\n", 33);
    } else {
        uartUsb.write("No gas detected. Detector state: OFF\r\n", 38);
    }
}

void sendOverTempDetectorState()
{
    if (overTempDetectorState) {
        uartUsb.write("Over temperature detected! Detector state: ON\r\n", 47);
    } else {
        uartUsb.write("Temperature normal. Detector state: OFF\r\n", 41);
    }
}

void uartTask()
{
    char receivedChar = '\0';
    if (uartUsb.readable()) {
        uartUsb.read(&receivedChar, 1);
        if (receivedChar == '1') {
            sendAlarmState();
        } else if (receivedChar == '2') {
            sendGasDetectorState();
        } else if (receivedChar == '3') {
            sendOverTempDetectorState();
        } else {
            availableCommands();
        }
    }
}

void availableCommands()
{
    uartUsb.write("Available commands:\r\n", 21);
    uartUsb.write("Press '1' to get the alarm state\r\n", 34);
    uartUsb.write("Press '2' to get the gas detector state\r\n", 42);
    uartUsb.write("Press '3' to get the over temperature detector state\r\n\r\n", 56);
    uartUsb.write("Note: Alarm state is automatically sent every 6 seconds\r\n", 54);
}
